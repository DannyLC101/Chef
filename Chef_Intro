Chef is an administration tool. System administrators used to do task manually, now it has been done automating those tasks with the use of Chef.
Configuration management is a method throught which we automate admin tasks.
Configuration tools turns our code into Infrastructure, ie. Infrastructure as a Code (IaaC)
Code can be Repeatable, Testable and Versionable
Advantages of Chef:
  Complete Automation
  Increase Uptime
  Improve Performance
  Ensure Compliance
  Prevent Errors
  Reduce Costs
  
WORKSTATIONS: Workstation are personal computers or Virtual Servers where all configuration code is created, tested and changed.

RECIPES: DevOps engineer writes code at worksatation. These codes are called RECIPES.

COOKBOOKS: A collection os recipes are called CookBooks.

KNIFE: Knife is a Command Line Tool that uploads the cookbook to the server. Workstation communicate with Chef server using Knife.

CHEF-SERVER: The Chef Server is a middle-man between the workstation and the nodes. All cookbooks are stored here. Server may be hosted locally or remote.

NODE: Nodes are the system that rewuire the configuration. Node communicate with the Chef-Server using the Chef-Client. Each Node can have different configuartion. Chef-Client is installed on every nodes.

OHAI: Ohai contains all the updated information about node. 

Create a Virtual Machine. Start Linux Machine on Cloud.

[]$ sudo do  {Super user do switch user}
[]# yum update -y   {will update Linux machine tools and softwares. -y will yes every steps}

Download Chef Workstation from www.chef.io. Copy the URL of that package 

[]# wget <URL>   {wget will download the package}
[]# yum install <chef_worksatation> -y  {installs chef, -y will yes every steps}
[]# which chef  {will show the directory where chef is located}
[]# chef --version   {shows the version}

COOKBOOK: It is a collection of recipes and some other files and folders. Cookbook contains:
  Chefignore: like gitignore
  Kitchen.yml: to test cookbook
  Metadata.rb: name, version, author info of cookbook. rb stands for Ruby file type
  Readme.md: informatioin about usage of cookbook
  Recipe: where the code is written
  Spec: used for unit test
  Test: used for integration test
  
[]# mkdir cookbooks  {create a directory named 'cookbooks'}
[]# cd cookbooks {goes inside directory cookbooks}
[]# chef generate cookbook test-cookbook  {will create a test-cookbook inside cookbook directory}
[]# yum install tree -y   {installs tree (tool to see tree view)}
[]# tree   {will show a tree view of the directory}
[]# cd test-cookbook/
[]# chef generate recipe <name>   {will create a recipe}
[]# chef generate recipe recipe1
[]# cd ..  {go back to parent folder}
[]# vi test-cookbook/recipes/recipe1.rb  {vi will open an editor for recipe1. rb means ruby file}
  file '/myfile1' do
  content "Welcome to Chef Project"
  action :create
  end
  {pess esc and :wq. w will save the file and q to quit editor}
[]# chef exec ruby -c test-cookbook/recipes/recipe1.rb  {spec will chek the ruby code syntax, -c means check}
>> Syntax OK
[]# chef-client -zr "recipe[test-cookbook::recipe1.rb]"  {z-local machine, r-run list. chef-client will run/execute the recipe1.rb on local machine}
[]# ls /  {/-root dir. ls will list all files in root dir}
[]# cat myfile1  {cat will show file content}
[]# chef generate recipe recipe2
[]# vi test-cookbook/recipes/recipe2.rb
  package 'tree' do
  action :install
  end
  
  file '/myfile2' do
  content "My First Chef Project"
  action :create
  owner :root
  group :root
  end
  {pess esc and :wq. w will save the file and q to quit editor}
[]# chef generate cookbook apache-cookbook
[]# cd apache-cookbook
[]# chef generate recipe apache-recipe
[]# vi apache-cookbook/recipes/apache-recipe.rb
  package 'httpd' do
  action :install
  end
  
  file '/var/www/html/index.html' do
  content "Welcome to Apache Page" 
  action :create
  end
  
  serivce 'httpd' do
  action [:enable, :start]   {give two actions in one line}
  end
  {pess esc and :wq. w will save the file and q to quit editor}
[]# chef exec ruby -c apache-cookbook/recipes/apache-recipe.rb  {exec will check the recipe syntax}
>> Syntax OK
[]# chef-client -zr "recipe[apache-cookbook::apache-recipe.rb]"  {Ohai will check if the node have apache server or not. If it already have, then this command will not execute. Instead it will give message up-to-date}

RESOURCE: It is a basic component of a recipe used to manage the infrastructure with different kind of states.

package: Manages the package on nodes.

service: Manage services on the nodes.

user: Manage users on the node.

group: Manage groups on the node.

template: Manages files with embeded Ruby template.

Cookbook-file: Transfer the files from the subdirectory in the cookbook to the node.

file: Manages the content of the file.

execute: Executes a command on the node.

cron: Edits an existing cron file on the node.

directory: Manages the directory on the node.

ATTRIBUTES: It is key-value pair which represents a specific detail about a node. Chef-client uses attributes to check the current state of node. 
Attributes defined by Ohai have the highest priority, followed by attributes defined in a recipe then the attributes defined in an attribute files.

Types of attributes are:
  -default
  -force-default
  -normal
  -override
  -force-override
  -automatic
  
Who defines the attribute:
  -Node
  -Cookbook
  -Roles
  -Environment
  -Recipes
  
[]$ sudo su
[]# ohai  {it will give all the info of the node}
[] ohai ipaddress  {>>10.1.1.0}
[] ohai memory/total
[] cd apache-cookbook/
[] chef generate recipe recipe3
[] cd ..
[] vi apache-cookbook/recipes/recipe3.rb
  file '/basicinfo' do
  content "This is to get attributes
  HOSTNAME: #{node['hostname']}
  IPADDRESS: #{node['ipaddress']}
  CPU: #{node['cpu']}
  MEMORY: #{node['memory']['total']}"
  owner 'root'
  group 'root'
  action :create
  end
[] chef-client -zr "recipe[apache-cookbook::recipe.rb]"
[] cat /basicinfo  {cat will show the content of the file}

Execute Linux script/command in recipes:
[] vi test-cookbook/recipes/recipe4.rb
  execute "run a script" do
  command <<_EOH
  mkdir /subfolder
  touch /subfile   {touch will create a file}
  EOH
  end
  :wq
[] chef-client -zr "recipe[test-cookbook::recipe4.rb]"
[] vi test-cookbook/recipes/recipe4.rb  {add/append code to recipe4.rb}
  user "sub-admin" do
  action :create
  end
  :wq
[] chef-client -zr "recipe[test-cookbook::recipe4.rb]"  {it will override /subfolder and /subfile}
[] vi test-cookbook/recipes/recipe4.rb  {add/append code to recipe4.rb}
  group "administrators" do
  action :create
  members 'sub-admin'
  append true
  end
  :wq
[] chef-client -zr "recipe[test-cookbook::recipe4.rb]"  {it will override /subfolder and /subfile}
[] cat /etc/group  

CONVERGENCE: We run chef-client to apply recipe to bring the node into desired state. This process is called Convergence.

RUNLIST: To run the recipe in sequencial order that we mention in a run list. With this process we can run multiple recipes.

[] chef-client -zr "recipe[test-cookbook::recipe4.rb], recipe[apache-cookbook::apache-recipe.rb]"

We can run multiple recipes by including recipes to the default.rb
[] vi test-cookbook/recipes/default.rb
  include_recipe "test-cookbook::recipe1"
  include_recipe "test-cookbook::recipe2"
  :wq
[] chef-client -zr "recipe[test-cookbook::default.rb]"
[] vi apache-cookbook/recipes/default.rb
  include_recipe "apache-cookbook::recipe3"
  include_recipe "apache-cookbook::recipe4"
  :wq
[] chef-client -zr "recipe[test-cookbook::default.rb], recipe[apache-cookbook::default.rb]"

 

  
  
  










